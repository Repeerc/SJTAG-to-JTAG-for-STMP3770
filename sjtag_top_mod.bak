module sjtag_top_mod(
	input clk_50MHz,
	input rst_n,
	
	input nTRST,
	input TDI,
	input TCK,
	input TMS,
	output reg TDO,
	
	inout sjtag,
	inout sjtag_pull,
	
	output reg test_led0,
	output reg test_led1
	
);

wire clk_192MHz;
wire pll_locked;

reg sjtag_oe;
reg sjtag_out;

reg sjtag_pull_oe;

reg rec_TDO;

assign sjtag = (sjtag_oe == 1) ? sjtag_out : 1'bz;
assign sjtag_pull = (sjtag_pull_oe == 1) ? 1 : 1'bz;

PLL pll0(
	.inclk0(clk_50MHz),
	.areset(~rst_n),
	.c0(clk_192MHz),
	.locked(pll_locked)
);

reg[31:0] cnt;

reg TCK_r1,TCK_r2;

reg sjtag_buf_r1, sjtag_buf_r2;

reg[7:0] stageA;
reg[31:0] cycle_192MHz;
reg[31:0] cycle_48MHz;

always @(negedge rst_n or posedge clk_192MHz)
begin
	if(rst_n == 0)
	begin
		stageA <= 0;
		cnt <= 0;
		sjtag_pull_oe <= 0;
		sjtag_out <= 0;
		sjtag_oe <= 0;
		cycle_192MHz <= 0;
		{TCK_r1, TCK_r2} <= 2'b11;
		{sjtag_buf_r1, sjtag_buf_r2} <= 2'b11;
		
		rec_TDO <= 0;
		TDO <= 0;
		
		test_led0 <= 0;
		test_led1 <= 0;
	end
	else
	begin
	/*
		cnt <= cnt + 1;
		if(cnt > 192000000)
		begin
			cnt <= 0;
			//test_led0 <= ! test_led0;	
			
		end
		*/

	/*
	if((TCK_buf[1] == 1) && (TCK_buf[0] == 0))	//TCK下降沿
	begin
		TDO <= rec_TDO;
	end
	*/
	case(stageA)
		0: //Async Start Phase
			begin
				TCK_r1 <= TCK;
				TCK_r2 <= TCK_r1;	
				if((TCK_r2 == 0) && (TCK_r1 == 1))	//TCK上升沿
				begin
					
					stageA <= 1;
					cycle_192MHz <= 0;
					
					sjtag_out <= 1;
					sjtag_oe <= 1;
					sjtag_pull_oe <= 1;
					
					test_led1 <= !test_led1;	//1
					
				end
			end
		1: //Timing Mark Phase START
			begin
				cycle_192MHz <= cycle_192MHz + 1;
				if(cycle_192MHz == 4)
				begin
					sjtag_out <= 0;
					sjtag_oe <= 0;
					cycle_192MHz <= 0;
					stageA <= 2;
					{sjtag_buf_r1, sjtag_buf_r2} <= 2'b11;
					
					test_led1 <= !test_led1;	//0
				end
			end
		2: //Timing Mark Phase END
			begin
				sjtag_buf_r1 <= sjtag;
				sjtag_buf_r2 <= sjtag_buf_r1;
				if((sjtag_buf_r1 == 0) && (sjtag_buf_r2 == 1)) //SJTAG输入下降沿
					begin
						sjtag_pull_oe <= 0;
						sjtag_oe <= 1;
						sjtag_out <= 0;
						cycle_192MHz <= 0;
						cycle_48MHz <= 0;
						stageA <= 3;
						
						
						test_led1 <= !test_led1;	//1
					end
			end
		3:	//Debugger Send TDI, Mode Phase
			begin
				cycle_192MHz <= cycle_192MHz + 1;
				if(cycle_192MHz == 8)
				begin
					cycle_48MHz <= cycle_48MHz + 1;
					cycle_192MHz <= 0;
				
				
					case(cycle_48MHz)
						1:
							begin
								if(nTRST == 0)
								begin
									sjtag_out <= 1;
								end
								else
								begin
									sjtag_out <= 0;
								end
								
								test_led1 <= !test_led1;	//0
							end
						2:
							begin
								if(nTRST == 0)
								begin
									sjtag_out <= 0;
									sjtag_oe <= 1;
									stageA <= 7;
								end
								else
								begin
									sjtag_out <= TMS;
								end
								
								test_led1 <= !test_led1;	//1
							end
						3:
							begin
								sjtag_out <= TDI;
								
								test_led1 <= !test_led1;	//0
							end
						4:
							begin
								sjtag_out <= 0;
							end
						5:
							begin
								sjtag_oe <= 0;
								
							end
						6:
							begin
								stageA <= 4;
								
								test_led1 <= !test_led1;	//1
								
								cycle_192MHz <= 0;
								cycle_48MHz <= 0;
								
								{sjtag_buf_r1, sjtag_buf_r2} <= 2'b00;
								//sjtag_buf <= 2'b00;
							end
						7:
							begin
							
							end
					endcase
				end
				
			end
			
		4:	//Wait For Return Clock Phase A
			begin
				sjtag_buf_r1 <= sjtag;
				sjtag_buf_r2 <= sjtag_buf_r1;
				if((sjtag_buf_r1 == 1) && (sjtag_buf_r2 == 0))	//上升沿
				begin
					cycle_192MHz <= 0;
					cycle_48MHz <= 0;
					stageA <= 5;
					
					test_led1 <= !test_led1;	//0
					
				end
			end
		5: //Wait For Return Clock Phase B
			begin
				cycle_192MHz <= cycle_192MHz + 1;
				if(cycle_192MHz == 8)
				begin
					cycle_192MHz <= 0;
					stageA <= 6;
				end
			end
		6: //Sends TDO and Return Clock Timing Phase
			begin
				cycle_192MHz <= cycle_192MHz + 1;
				if(cycle_192MHz == 2)
				begin
					TDO <= sjtag;
				end
				
				if(cycle_192MHz == 8)
				begin
					cycle_192MHz <= 0;
					stageA <= 7;
					sjtag_out <= 0;
					sjtag_oe <= 1;
				end
			
			end
		7: //Terminate Phase
			begin
				cycle_192MHz <= cycle_192MHz + 1;
				if(cycle_192MHz == 4)
				begin
					sjtag_oe <= 0;
				end
				
				if(cycle_192MHz == 6)
				begin
					cycle_192MHz <= 0;
					
					{sjtag_buf_r1,sjtag_buf_r2} <= 2'b11;
					stageA <= 0;
					
					
					test_led0 <= !test_led0;
					
				end
				
			end
	endcase
	

	
	
	
	end
	
	

end

endmodule

